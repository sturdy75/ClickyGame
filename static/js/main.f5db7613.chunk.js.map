{"version":3,"sources":["images sync /^/.*$","images/bifur.jpg","images/bilbo.jpg","images/bofur.jpg","images/elf.jpg","images/fili.jpg","images/galadriel.jpg","images/gandalf.jpg","images/gloin.jpg","images/gollum.jpg","images/kili.jpg","images/nori.jpg","images/ori.jpg","images/thorin.jpg","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/FriendCard/FriendCard.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["map","./bifur.jpg","./bilbo.jpg","./bofur.jpg","./elf.jpg","./fili.jpg","./galadriel.jpg","./gandalf.jpg","./gloin.jpg","./gollum.jpg","./kili.jpg","./nori.jpg","./ori.jpg","./thorin.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","p","Navbar","react_default","a","createElement","className","this","props","score","Component","Jumbotron","FriendCard","onClick","imageClick","alt","image","replace","src","require","Footer","App","state","hobbits","clickedHobbits","event","currentHobbit","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","fish","_this2","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_FriendCard_FriendCard","key","components_Footer_Footer","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5db7613.chunk.js","sourcesContent":["var map = {\n\t\"./bifur.jpg\": 20,\n\t\"./bilbo.jpg\": 21,\n\t\"./bofur.jpg\": 22,\n\t\"./elf.jpg\": 23,\n\t\"./fili.jpg\": 24,\n\t\"./galadriel.jpg\": 25,\n\t\"./gandalf.jpg\": 26,\n\t\"./gloin.jpg\": 27,\n\t\"./gollum.jpg\": 28,\n\t\"./kili.jpg\": 29,\n\t\"./nori.jpg\": 30,\n\t\"./ori.jpg\": 31,\n\t\"./thorin.jpg\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/bifur.378a2f4b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bilbo.1d9e7f64.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bofur.4db5f5a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/elf.c7f3c7d4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fili.d13842e7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galadriel.36c6130b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gandalf.bd0dc0bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gloin.442b8d08.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gollum.829821e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kili.76f27ffa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nori.1b402fae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ori.a1f4f3fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thorin.084a093e.jpg\";","import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n         <ul>\r\n          <li className=\"itemLeft\">Test Your Memory</li>\r\n          <li className=\"itemCenter\"></li>\r\n          <li className=\"itemRight\">Score: {this.props.score}</li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = () => (\r\n\t<header className = \"header\">\r\n\t\t<h1>Lord of the Rings Clicky Game!</h1>\r\n\t\t<h2>Click on any image to earn a point, but don't click on the same picture more than once. Click all 12 pics, and you win.</h2>\r\n\t</header>\r\n);\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./FriendCard.css\";\r\n\r\n//pass the image into each card so all 12 are rendered\r\nconst FriendCard = props => (\r\n  <div className=\"card\" onClick={props.imageClick}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.image.replace(\".jpg\", \"\")} src={require(\"../../images/\" + props.image)} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FriendCard;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => (\r\n\t<header className = \"footer\">\r\n\t\t<p>ClickyGame by Sturdy</p>\r\n\t</header>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport FriendCard from \"./components/FriendCard\";\nimport Footer from \"./components/Footer\";\nimport hobbits from \"./hobbits.json\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    hobbits,\n    clickedHobbits: [],\n    score: 0\n  };\n\n  imageClick = event => {\n    const currentHobbit = event.target.alt;\n    const HobbitAlreadyClicked =\n      this.state.clickedHobbits.indexOf(currentHobbit) > -1;\n\n    if (HobbitAlreadyClicked) {\n      this.setState({\n        hobbits: this.state.hobbits.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedHobbits: [],\n        score: 0\n      });\n      alert(\"You have lose, would you care to play again?\");\n\n    } else {\n      this.setState(\n        {\n          hobbits: this.state.hobbits.sort(function (a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedHobbits: this.state.clickedHobbits.concat(\n            currentHobbit\n          ),\n          score: this.state.score + 1\n        },\n\n        () => {\n          if (this.state.score === 12) {\n            alert(\"Congrats! You Won!\");\n            this.setState({\n              hobbits: this.state.fish.sort(function (a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedHobbits: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n        />\n        <Jumbotron />\n        <div className=\"wrapper\">\n          {this.state.hobbits.map(hobbits => (\n            <FriendCard\n              imageClick={this.imageClick}\n              id={hobbits.id}\n              key={hobbits.id}\n              image={hobbits.image}\n            />\n          ))}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}